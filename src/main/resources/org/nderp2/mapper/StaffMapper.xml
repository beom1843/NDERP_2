<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.nderp2.mapper.StaffMapper">
	<select id="getCurrentStaffNo" resultType="Integer">
		select max(staff_no) from staff
	</select>

	<select id="getCurrentInstNo" resultType="Integer">
		select max(staff_institution_no) from staff_institution
	</select>
	
	<select id="getCurrentProjectNo" resultType="Integer">
		select max(staff_project_no) from staff_project
	</select>

	<select id="getCurrentTasteNo" resultType="Integer">
		select max(staff_taste_no) from staff_taste
	</select>
	
	<insert id="createStaff">
		insert into Staff values
			(staff_seq.nextval, #{staff_id}, #{staff_pw}, #{staff_name}, #{staff_id_no}, #{staff_hp}, #{staff_email},#{staff_religion},#{staff_military},#{staff_address},#{staff_zipcode})
	</insert>
	
	<insert id="insertHotline">
		insert into staff_Hotline values
			(staff_Hotline_seq.nextval,#{staff_no},#{hotline_code},#{hotline_name},#{hotline_hp} )
	</insert>
	
	<insert id="insertBank">
		insert into staff_Bank values
			(staff_Bank_seq.nextval,#{staff_no}, #{bank_code}, #{bank_number})
	</insert>
	
	<insert id="insertSchool">
		insert into staff_School values
			(staff_School_seq.nextval,#{staff_no}, #{college_code},#{school_name},#{school_major},#{school_sub},#{school_graduateday},#{education_code})
	</insert>
	
	<insert id="insertFamily">
		insert into staff_Family values
			(staff_Family_seq.nextval,#{staff_no}, #{family_code}, #{family_name}, #{family_job}, #{family_birthy},#{family_livew})
	</insert>
	
	<insert id="insertCareer">
		insert into staff_Career values
			(staff_Career_seq.nextval,#{staff_no},#{career_hired},#{career_position},#{career_department},#{career_code},#{career_name},#{career_desc},#{career_salary},#{career_hireday},#{career_retireday})
	</insert>
	
	<insert id="insertCertification">
		insert into staff_Certification values
			(staff_Certification_seq.nextval,#{staff_no},#{certification_code})
	</insert>
	
	<insert id="insertForeignlang">
		insert into staff_Foreignlang values
			(staff_Foreignlang_seq.nextval,#{staff_no},#{foreignlang_code},#{foreignlang_type} )
	</insert>
	
	<insert id="insertInstitution">
		insert into staff_Institution values
			(staff_Institution_seq.nextval,#{staff_no},#{institution_name}, #{institution_period},#{institution_grad})
	</insert>
	
	<insert id="insertInstStack">
		insert into institution_stack values
			(institution_stack_seq.nextval, #{institution_stack_code}, #{institution_no})
	</insert>
	
	<insert id="insertTaste">
		insert into staff_Taste values
			(staff_Taste_seq.nextval,#{staff_no}, #{smoking_code},#{beer_code},#{soju_code})
	</insert>
	
	<insert id="insertTasteInterest">
		insert into taste_interest values
			(taste_interest_seq.nextval, #{taste_interest_code}, #{taste_no})
	</insert>
	
	<insert id="insertHobby">
		insert into staff_Hobby values
			(staff_Hobby_seq.nextval,#{staff_no},#{hobby} )
	</insert>
	
	<insert id="insertProject">
		insert into staff_Project values
			(staff_Project_seq.nextval,#{staff_no},#{project_startday},#{project_endday},#{project_customer},#{project_company},#{project_name})
	</insert>
	
	<insert id="insertRole">
		insert into project_role values
		(project_role_seq.nextval,#{staff_project_no}, #{project_role})
	</insert>
	
	<insert id="insertDbms">
		insert into project_Dbms values
			(project_Dbms_seq.nextval, #{staff_project_no},#{project_dbms})
	</insert>
	
	<insert id="insertDevetc">
		insert into project_Devetc values
			(project_Devetc_seq.nextval, #{staff_project_no},#{project_devetc})
	</insert>
		
	<insert id="insertFramework">
		insert into project_Framework values
			(project_Framework_seq.nextval, #{staff_project_no},#{project_framework})
	</insert>
		
	<insert id="insertLanguage">
		insert into project_Language values
			(project_Language_seq.nextval, #{staff_project_no},#{project_language})
	</insert>
		
	<insert id="insertOs">
		insert into project_Os values
			(project_Os_seq.nextval, #{staff_project_no},#{project_os})
	</insert>
		
	<insert id="insertServer">
		insert into project_Server values
			(project_Server_seq.nextval, #{staff_project_no},#{project_server})
	</insert>
	
	<select id="search" resultType="org.nderp2.domain.ResultDAO">
	select *
	from
		(select rownum as rn, staff_name, sex,birthy, age,staff_hp,staff_email, staff_id_no, staff_address,
			staff_education,staff_grad_y,
			staff_dev_year, staff_total_skill,
			staff_certification,
			career_year, career_code, STAFF_MILITARY, soju_code, beer_code, start_Day,end_Day,
			dev_y, education_code,certification_code,role_code, language_code, framework_code, dbms_code, devetc_code,college_code,graduate_y,
			foreignlangread, foreignlangspeak 
		from
			(select rownum as rn, A.staff_name, A.sex,A.birthy, A.age,A.staff_hp,A.staff_email, A.staff_id_no, A.staff_address,
				B.education_name as staff_education, B.grad_year as staff_grad_y,
				C.dev_year as staff_dev_year, C.total_skill as staff_total_skill,
				D.certification as staff_certification,
				E.career_year, E.career_code, A.STAFF_MILITARY, G.soju_code, G.beer_code,C.start_Day,C.end_Day,
				C.dev_y,B.education_code,D.certification_code,C.role_code,c.language_code, c.framework_code, c.dbms_code, c.devetc_code,B.college_code,B.graduate_y,
				h.foreignlangread, h.foreignlangspeak
			from 
				(select rownum,staff_no, staff_name,substr(staff_id_no,1,4) as birthd,
					case substr(staff_id_no, 7,1) 
					when '1' then '남'
					when '2' then '여'
					when '3' then '남'
					when '4' then '여' end as sex,
			
					case substr(staff_id_no, 7,1) 
					when '1' then to_number(to_char(sysdate,'yyyy'))-1899-substr(staff_id_no, 1, 2)||'세'
					when '2' then  to_number(to_char(sysdate,'yyyy'))-1899-substr(staff_id_no, 1, 2)||'세'
					when '3' then  to_number(to_char(sysdate,'yyyy'))-1999-substr(staff_id_no, 1, 2)||'세'
					when '4' then  to_number(to_char(sysdate,'yyyy'))-1999-substr(staff_id_no, 1, 2)||'세' end as age,
					
					case substr(staff_id_no, 7,1)
					when '1' then 1900+substr(staff_id_no, 1, 2)||'년생'
					when '2' then  1900+substr(staff_id_no, 1, 2)||'년생'
					when '3' then  2000+substr(staff_id_no, 1, 2)||'년생'
					when '4' then  2000+substr(staff_id_no, 1, 2)||'년생' end as birthy,
		
					substr(staff_hp,1,3)||'-'||substr(staff_hp,4,4)||'-'||substr(staff_hp,8,4) as staff_hp, staff_email, 
					substr(staff_id_no,1,6)||'-'|| substr(staff_id_no, 7,7) as staff_id_no ,
					staff_address, staff_military
				from staff) A,
				
				
				(select b.staff_no, b.College_Code,a.education_name, b.grad_year||'년' as grad_year, b.education_code, b.grad_year as graduate_y
				from code_education a, 
					(select a.college_code, a.staff_no, b.education_code,substr(a.school_graduateday,1,4) as grad_year
					from staff_school a,(select staff_no, max(education_code) as education_code
					from staff_school
					group by staff_no) b
				where a.staff_no=b.staff_no
					and a.education_code = b.education_code) b
					where a.education_code=b.education_code) B,
			
			
				(select b.staff_no,
					b.project_language||','|| c.project_framework||','|| d.project_dbms||','|| e.project_devetc as total_skill, 
					f.dev_year||'년차' as dev_year, f.dev_year as dev_y,
			    b.language_code, c.framework_code, d.dbms_code,e.devetc_code,
			    g.role_code,f.start_day, f.end_day
				from
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_language,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_language,
					      regexp_replace(listagg(a.language_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as language_code
							  from (select L.Project_language_No as project_language_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.language_Name as project_language,
					  L.Project_language as language_code,
					  S.Staff_No
							 from code_language code_l, project_language l, staff_project s
							 where l.project_language = code_l.language_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) b,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_framework,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_framework,
					      regexp_replace(listagg(a.framework_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as framework_code
							  from (select L.Project_framework_No as project_framework_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.framework_Name as project_framework,
					  L.Project_framework as framework_code,
					  S.Staff_No
							 from code_framework code_l, project_framework l, staff_project s
							 where l.project_framework = code_l.framework_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) c,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_dbms,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_dbms,
					      regexp_replace(listagg(a.dbms_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as dbms_code
							  from (select L.Project_dbms_No as project_dbms_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.dbms_Name as project_dbms,
					  L.Project_dbms as dbms_code,
					  S.Staff_No
							 from code_dbms code_l, project_dbms l, staff_project s
							 where l.project_dbms = code_l.dbms_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) d,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_devetc,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_devetc,
					      regexp_replace(listagg(a.devetc_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as devetc_code
							  from (select L.Project_devetc_No as project_devetc_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.devetc_Name as project_devetc,
					  L.Project_devetc as devetc_code,
					  S.Staff_No
							 from code_devetc code_l, project_devetc l, staff_project s
							 where l.project_devetc = code_l.devetc_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) e,
							 
					(select staff_no, to_number(to_char(sysdate,'yyyy'))-substr(min(project_startday),1,4)+1 as dev_year,
						max(project_startday) as start_day,
						max(project_endday) as end_day
					from staff_project
					group by staff_no) f,
							
				    (select a.staff_no,
				      regexp_replace(listagg(a.role_code,',')
						  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as role_code
						  from (select L.Project_role_No as project_role_no,
								  l.staff_project_no as staff_project_no, 
								  Code_L.role_Name as project_role,
								  L.Project_role as role_code,
								  S.Staff_No
								 from code_role code_l, project_role l, staff_project s
									 where l.project_role = code_l.role_code
							     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
					 group by a.staff_no
					 order by a.STAFF_NO desc) g
			     
				  where b.Staff_No = c.Staff_No
					  and b.Staff_No = d.Staff_No
					  and b.Staff_No = e.Staff_No
					  and b.staff_no =f.staff_no
					  and b.staff_no = g.staff_no) C,
			  
				(select c.staff_no,
			  	regexp_replace(listagg(C.Staff_Certification, ',')within group(order by C.Staff_Certification),'([^,]+)(,\1)*(,|$)', '\1\3')
					as certification,
				regexp_replace(listagg(C.certification_code, ',')within group(order by C.Staff_Certification),'([^,]+)(,\1)*(,|$)', '\1\3')
					as certification_code
				from
					(select a.staff_certification_no, a.staff_no, b.certification_name as staff_certification, a.certification_code
					from staff_certification a, code_certification b
					where a.certification_code = b.certification_code) c,
					staff d
				group by C.Staff_No) D,
				
				
				(select a.staff_no ,
					round(sum((to_number(substr(a.career_retireday,1,4))-to_number(substr(a.career_hireday,1,4)))*12+
						to_number(substr(a.career_retireday,5,2))-to_number(substr(a.career_hireday,5,2)))/12,1) as career_year,
					regexp_replace(listagg(a.career_code,',') within group(order by a.staff_career_no), '([^,]+)(,\1)*(,|$)', '\1\3') as career_code
				from staff_career a
				group by a.staff_no) E,
				
				staff_taste G,
				
				(select a.staff_no, a.foreignlangread, b.foreignlangspeak
				from
					(select staff_no, listagg(foreignlang_code,',')
					within group(order by foreignlang_code) as foreignlangRead, FOREIGNLANG_TYPE_CODE
					from staff_foreignlang
					group by staff_no, FOREIGNLANG_TYPE_CODE
					having FOREIGNLANG_TYPE_CODE='1') a,
					
					(select staff_no, listagg(foreignlang_code,',')
					within group(order by foreignlang_code) as foreignlangSpeak, FOREIGNLANG_TYPE_CODE
					from staff_foreignlang
					group by staff_no, FOREIGNLANG_TYPE_CODE
					having FOREIGNLANG_TYPE_CODE='2')b
				where a.staff_no=b.staff_no) H
				
			where A.staff_no = B.staff_no
				and A.staff_no = C.staff_no
				and A.staff_no = D.staff_no
				and A.staff_no = E.staff_no
				and a.staff_no = g.staff_no
				and a.staff_no = h.staff_no
			)
		where rownum>0

		<foreach collection="typeArr" item="type">
			<trim prefix=" AND(" suffix=")">
				<if test="type=='a'.toString()">
				dev_y between #{dev1} and #{dev2}
				</if>
				
				<if test="type=='c'.toString()">
				education_code in
					<foreach collection="eduArr" item="edu" open="(" separator ="," close=")">
					#{edu}
					</foreach>
				</if>
				<if test="type=='d'.toString()">
					<foreach collection="certiArr" item="certi" separator="or" >
					 	certification_code like '%'||#{certi}||'%'
					 </foreach>
				</if>
				<if test="type=='e'.toString()">
					 <foreach collection="roleArr" item="role" separator="or" >
					 	role_code like '%'||#{role}||'%'
					 </foreach>
				
				</if>
				<if test="type=='f'.toString()">
					start_day between #{projectStartDay1} and #{projectStartDay2}
				</if>
				<if test="type=='g'.toString()">
					end_day between #{projectEndDay1} and #{projectEndDay2}
				</if>
				<if test="type=='h'.toString()">
					college_code in
					<foreach collection="collegeArr" item="college" open="(" separator ="," close=")">
					#{college}
					</foreach>
				</if>
				<if test="type=='i'.toString()">
					graduate_y between #{graduateDay1} and #{graduateDay2}
				</if>
				<if test="type=='j'.toString()">
					sex in
					<foreach collection="sexArr" item="sex" open="(" separator ="," close=")">
						<if test="sex=='F'.toString()">
						'여'
						</if>
						<if test="sex=='M'.toString()">
						'남'
						</if>
					</foreach>
				</if>
				<if test="type=='k'.toString()">
					substr(birthy,1,4)||substr(staff_id_no,3,2) between #{birthDay1} and #{birthDay2}
				</if>
				<if test="type=='l'.toString()">
					substr(age,1,length(age)-1) between #{age1} and #{age2}
				</if>
				<if test="type=='m'.toString()">
					career_code in
					<foreach collection="careerArr" item="career" open="(" separator ="," close=")">
					#{career}
					</foreach>
				</if>
				<if test="type=='n'.toString()">
					career_year between #{career1} and #{career2}
				</if>
				<if test="type=='o'.toString()">
					foreignlangread in
					<foreach collection="foreignreadArr" item="foreignread" open="(" separator ="," close=")">
					#{foreignread}
					</foreach>
				</if>
				<if test="type=='p'.toString()">
					foreignlangspeak in
					<foreach collection="foreignspeakArr" item="foreignspeak" open="(" separator ="," close=")">
					#{foreignspeak}
					</foreach>
				</if>
				<if test="type=='q'.toString()">
					soju_code between #{soju1] and #{soju2}
				</if>
				<if test="type=='r'.toString()">
					beer_code between #{beer1} and #{beer2}
				</if>
				<if test="type=='s'.toString()">
					staff_military in
					<foreach collection="militaryArr" item="military" open="(" separator ="," close=")">
					#{military}
					</foreach>
				</if>
			</trim>
			<if test="type=='b'.toString()">
					<if test="skillRadio=='a'.toString()">
						<foreach collection="skillArr" item="skill" open="and (" separator=")and(" close=")" >
								<if test="skill=='a'.toString()">
									language_code like '%'||#{project_language}||'%'
								</if>
								<if test="skill=='b'.toString()">
									framework_code like '%'||#{project_framework}||'%'
								</if>
								<if test="skill=='c'.toString()">
									dbms_code like '%'||#{project_dbms}||'%'
								</if>
								<if test="skill=='d'.toString()">
									devetc_code like '%'||#{project_devetc}||'%'
								</if>
						</foreach>
					</if>
					<if test="skillRadio=='o'.toString()">
						<foreach collection="skillArr" item="skill" open="and (" separator=" or " close=")" >
								<if test="skill=='a'.toString()">
									language_code like '%'||#{project_language}||'%'
								</if>
								<if test="skill=='b'.toString()">
									framework_code like '%'||#{project_framework}||'%'
								</if>
								<if test="skill=='c'.toString()">
									dbms_code like '%'||#{project_dbms}||'%'
								</if>
								<if test="skill=='d'.toString()">
									devetc_code like '%'||#{project_devetc}||'%'
								</if>
						</foreach>
					</if>	
				</if>
				<if test="type=='t'.toString()">
				<if test="keywordRadio=='a'.toString()">
					<foreach collection="keywordArr" item="keyword" open="and (" separator=")and(" close=")" >
					   	<if test="keyword=='a'.toString()">
					    lower(staff_name||staff_total_skill||staff_certification||staff_Address like) '%'||#{keyword1}||'%'					    
					    </if>
					    <if test="keyword=='b'.toString()">
					    lower(staff_name||staff_total_skill||staff_certification||staff_Address) like '%'||#{keyword2}||'%'					    
					    </if>
					</foreach>
				</if>
				<if test="keywordRadio=='o'.toString()">	
					<foreach collection="keywordArr" item="keyword" open="and (" separator=" or " close=")" >
					   	<if test="keyword=='a'.toString()">
					    lower(staff_name||staff_total_skill||staff_certification||staff_Address) like '%'||#{keyword1}||'%'					    
					    </if>
					    <if test="keyword=='b'.toString()">
					    lower(staff_name||staff_total_skill||staff_certification||staff_Address) like '%'||#{keyword2}||'%'					    
					    </if>
					</foreach>					
				</if>
			</if>				
		</foreach>
		)
		<![CDATA[
		where rn<=(#{pageNum} * #{amount})
		and rn>((#{pageNum}-1) * #{amount})
		]]>
		order by ${sortCondition} ${method}
	</select>
	
	<select id="getTotal" resultType="Integer">
	select count(rn)
		from
			(select rownum as rn, A.sex,A.birthy, A.age,A.staff_id_no,
				E.career_year, E.career_code, A.STAFF_MILITARY, G.soju_code, G.beer_code,C.start_Day,C.end_Day,
				C.dev_y,B.education_code,D.certification_code,C.role_code,c.language_code, c.framework_code, c.dbms_code, c.devetc_code,B.college_code,B.graduate_y,
				h.foreignlangread, h.foreignlangspeak
			from 
				(select rownum,staff_no,substr(staff_id_no,1,4) as birthd,
					case substr(staff_id_no, 7,1) 
					when '1' then '남'
					when '2' then '여'
					when '3' then '남'
					when '4' then '여' end as sex,
			
					case substr(staff_id_no, 7,1) 
					when '1' then to_number(to_char(sysdate,'yyyy'))-1899-substr(staff_id_no, 1, 2)||'세'
					when '2' then  to_number(to_char(sysdate,'yyyy'))-1899-substr(staff_id_no, 1, 2)||'세'
					when '3' then  to_number(to_char(sysdate,'yyyy'))-1999-substr(staff_id_no, 1, 2)||'세'
					when '4' then  to_number(to_char(sysdate,'yyyy'))-1999-substr(staff_id_no, 1, 2)||'세' end as age,
					
					case substr(staff_id_no, 7,1)
					when '1' then 1900+substr(staff_id_no, 1, 2)||'년생'
					when '2' then  1900+substr(staff_id_no, 1, 2)||'년생'
					when '3' then  2000+substr(staff_id_no, 1, 2)||'년생'
					when '4' then  2000+substr(staff_id_no, 1, 2)||'년생' end as birthy,
					substr(staff_id_no,1,6)||'-'|| substr(staff_id_no, 7,7) as staff_id_no ,staff_military
				from staff) A,
				
				
				(select b.staff_no, b.College_Code, b.education_code, b.grad_year as graduate_y
				from
					(select a.college_code, a.staff_no, b.education_code,substr(a.school_graduateday,1,4) as grad_year
					from staff_school a,(select staff_no, max(education_code) as education_code
					from staff_school
					group by staff_no) b
				where a.staff_no=b.staff_no
					and a.education_code = b.education_code) b
					) B,
			
			
				(select b.staff_no,
					f.dev_year as dev_y,
			    	b.language_code, c.framework_code, d.dbms_code,e.devetc_code,
			    	g.role_code,f.start_day, f.end_day
				from
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_language,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_language,
					      regexp_replace(listagg(a.language_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as language_code
							  from (select L.Project_language_No as project_language_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.language_Name as project_language,
					  L.Project_language as language_code,
					  S.Staff_No
							 from code_language code_l, project_language l, staff_project s
							 where l.project_language = code_l.language_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) b,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_framework,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_framework,
					      regexp_replace(listagg(a.framework_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as framework_code
							  from (select L.Project_framework_No as project_framework_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.framework_Name as project_framework,
					  L.Project_framework as framework_code,
					  S.Staff_No
							 from code_framework code_l, project_framework l, staff_project s
							 where l.project_framework = code_l.framework_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) c,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_dbms,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_dbms,
					      regexp_replace(listagg(a.dbms_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as dbms_code
							  from (select L.Project_dbms_No as project_dbms_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.dbms_Name as project_dbms,
					  L.Project_dbms as dbms_code,
					  S.Staff_No
							 from code_dbms code_l, project_dbms l, staff_project s
							 where l.project_dbms = code_l.dbms_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) d,
				
					(select a.staff_no, regexp_replace(listagg(a.PROJECT_devetc,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as project_devetc,
					      regexp_replace(listagg(a.devetc_code,',')
							  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as devetc_code
							  from (select L.Project_devetc_No as project_devetc_no,
					  l.staff_project_no as staff_project_no, 
					  Code_L.devetc_Name as project_devetc,
					  L.Project_devetc as devetc_code,
					  S.Staff_No
							 from code_devetc code_l, project_devetc l, staff_project s
							 where l.project_devetc = code_l.devetc_code
					     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
							 group by a.staff_no
							 order by a.STAFF_NO desc) e,
							 
					(select staff_no, to_number(to_char(sysdate,'yyyy'))-substr(min(project_startday),1,4)+1 as dev_year,
						max(project_startday) as start_day,
						max(project_endday) as end_day
					from staff_project
					group by staff_no) f,
							
				    (select a.staff_no,
				      regexp_replace(listagg(a.role_code,',')
						  within group(order by a.staff_no),'([^,]+)(,\1)*(,|$)', '\1\3') as role_code
						  from (select L.Project_role_No as project_role_no,
								  l.staff_project_no as staff_project_no, 
								  Code_L.role_Name as project_role,
								  L.Project_role as role_code,
								  S.Staff_No
								 from code_role code_l, project_role l, staff_project s
									 where l.project_role = code_l.role_code
							     and S.Staff_Project_No=L.Staff_Project_No)a, STAFF_PROJECT b
					 group by a.staff_no
					 order by a.STAFF_NO desc) g
			     
				  where b.Staff_No = c.Staff_No
					  and b.Staff_No = d.Staff_No
					  and b.Staff_No = e.Staff_No
					  and b.staff_no =f.staff_no
					  and b.staff_no = g.staff_no) C,
			  
				(select c.staff_no,
				regexp_replace(listagg(C.certification_code, ',')within group(order by C.Staff_Certification),'([^,]+)(,\1)*(,|$)', '\1\3')
					as certification_code
				from
					(select a.staff_certification_no, a.staff_no, b.certification_name as staff_certification, a.certification_code
					from staff_certification a, code_certification b
					where a.certification_code = b.certification_code) c,
					staff d
				group by C.Staff_No) D,
				
				
				(select a.staff_no ,
					round(sum((to_number(substr(a.career_retireday,1,4))-to_number(substr(a.career_hireday,1,4)))*12+
						to_number(substr(a.career_retireday,5,2))-to_number(substr(a.career_hireday,5,2)))/12,1) as career_year,
					regexp_replace(listagg(a.career_code,',') within group(order by a.staff_career_no), '([^,]+)(,\1)*(,|$)', '\1\3') as career_code
				from staff_career a
				group by a.staff_no) E,
				
				staff_taste G,
				
				(select a.staff_no, a.foreignlangread, b.foreignlangspeak
				from
					(select staff_no, listagg(foreignlang_code,',')
					within group(order by foreignlang_code) as foreignlangRead, FOREIGNLANG_TYPE_CODE
					from staff_foreignlang
					group by staff_no, FOREIGNLANG_TYPE_CODE
					having FOREIGNLANG_TYPE_CODE='1') a,
					
					(select staff_no, listagg(foreignlang_code,',')
					within group(order by foreignlang_code) as foreignlangSpeak, FOREIGNLANG_TYPE_CODE
					from staff_foreignlang
					group by staff_no, FOREIGNLANG_TYPE_CODE
					having FOREIGNLANG_TYPE_CODE='2')b
				where a.staff_no=b.staff_no) H
				
			where A.staff_no = B.staff_no
				and A.staff_no = C.staff_no
				and A.staff_no = D.staff_no
				and A.staff_no = E.staff_no
				and a.staff_no = g.staff_no
				and a.staff_no = h.staff_no)
		where rownum>0
		<foreach collection="typeArr" item="type">
			<trim prefix=" AND(" suffix=")">
				<if test="type=='a'.toString()">
				dev_y between #{dev1} and #{dev2}
				</if>
				
				<if test="type=='c'.toString()">
				education_code in
					<foreach collection="eduArr" item="edu" open="(" separator ="," close=")">
					#{edu}
					</foreach>
				</if>
				<if test="type=='d'.toString()">
					<foreach collection="certiArr" item="certi" separator="or" >
					 	certification_code like '%'||#{certi}||'%'
					 </foreach>
				</if>
				<if test="type=='e'.toString()">
					 <foreach collection="roleArr" item="role" separator="or" >
					 	role_code like '%'||#{role}||'%'
					 </foreach>
				
				</if>
				<if test="type=='f'.toString()">
					start_day between #{projectStartDay1} and #{projectStartDay2}
				</if>
				<if test="type=='g'.toString()">
					end_day between #{projectEndDay1} and #{projectEndDay2}
				</if>
				<if test="type=='h'.toString()">
					college_code in
					<foreach collection="collegeArr" item="college" open="(" separator ="," close=")">
					#{college}
					</foreach>
				</if>
				<if test="type=='i'.toString()">
					graduate_y between #{graduateDay1} and #{graduateDay2}
				</if>
				<if test="type=='j'.toString()">
					sex in
					<foreach collection="sexArr" item="sex" open="(" separator ="," close=")">
						<if test="sex=='F'.toString()">
						'여'
						</if>
						<if test="sex=='M'.toString()">
						'남'
						</if>
					</foreach>
				</if>
				<if test="type=='k'.toString()">
					substr(birthy,1,4)||substr(staff_id_no,3,2) between #{birthDay1} and #{birthDay2}
				</if>
				<if test="type=='l'.toString()">
					substr(age,1,length(age)-1) between #{age1} and #{age2}
				</if>
				<if test="type=='m'.toString()">
					career_code in
					<foreach collection="careerArr" item="career" open="(" separator ="," close=")">
					#{career}
					</foreach>
				</if>
				<if test="type=='n'.toString()">
					career_year between #{career1} and #{career2}
				</if>
				<if test="type=='o'.toString()">
					foreignlangread in
					<foreach collection="foreignreadArr" item="foreignread" open="(" separator ="," close=")">
					#{foreignread}
					</foreach>
				</if>
				<if test="type=='p'.toString()">
					foreignlangspeak in
					<foreach collection="foreignspeakArr" item="foreignspeak" open="(" separator ="," close=")">
					#{foreignspeak}
					</foreach>
				</if>
				<if test="type=='q'.toString()">
					soju_code between #{soju1] and #{soju2}
				</if>
				<if test="type=='r'.toString()">
					beer_code between #{beer1} and #{beer2}
				</if>
				<if test="type=='s'.toString()">
					staff_military in
					<foreach collection="militaryArr" item="military" open="(" separator ="," close=")">
					#{military}
					</foreach>
				</if>
			</trim>
			<if test="type=='b'.toString()">
				<if test="skillRadio=='a'.toString()">
					<foreach collection="skillArr" item="skill" open="and (" separator=")and(" close=")" >
							<if test="skill=='a'.toString()">
								language_code like '%'||#{project_language}||'%'
							</if>
							<if test="skill=='b'.toString()">
								framework_code like '%'||#{project_framework}||'%'
							</if>
							<if test="skill=='c'.toString()">
								dbms_code like '%'||#{project_dbms}||'%'
							</if>
							<if test="skill=='d'.toString()">
								devetc_code like '%'||#{project_devetc}||'%'
							</if>
					</foreach>
				</if>
				<if test="skillRadio=='o'.toString()">
					<foreach collection="skillArr" item="skill" open="and (" separator=" or " close=")" >
							<if test="skill=='a'.toString()">
								language_code like '%'||#{project_language}||'%'
							</if>
							<if test="skill=='b'.toString()">
								framework_code like '%'||#{project_framework}||'%'
							</if>
							<if test="skill=='c'.toString()">
								dbms_code like '%'||#{project_dbms}||'%'
							</if>
							<if test="skill=='d'.toString()">
								devetc_code like '%'||#{project_devetc}||'%'
							</if>
					</foreach>
				</if>	
			</if>
			<if test="type=='t'.toString()">
				<if test="keywordRadio=='a'.toString()">
					<foreach collection="keywordArr" item="keyword" open="and (" separator=")and(" close=")" >
					   	<if test="keyword=='a'.toString()">
					    staff_total_skill||staff_certification||staff_Address like '%'||#{keyword1}||'%'					    
					    </if>
					    <if test="keyword=='b'.toString()">
					    staff_total_skill||staff_certification||staff_Address like '%'||#{keyword2}||'%'					    
					    </if>
					</foreach>
				</if>
				<if test="keywordRadio=='o'.toString()">	
					<foreach collection="keywordArr" item="keyword" open="and (" separator=" or " close=")" >
					   	<if test="keyword=='a'.toString()">
					    staff_total_skill||staff_certification||staff_Address like '%'||#{keyword1}||'%'					    
					    </if>
					    <if test="keyword=='b'.toString()">
					    staff_total_skill||staff_certification||staff_Address like '%'||#{keyword2}||'%'					    
					    </if>
					</foreach>					
				</if>
			</if>
		</foreach>
	</select>

</mapper>